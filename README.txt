              Lonely Planet Destination page Builder Demo

Foreword

This demo exercise has been developed using Perl. It's assumed that the reader
may have limited knowledge of the language, and therefore I have tried to make
it as easy as possible to get started, and to automate as much as possible,
all the dependencies required for this exercise.

Perl is not really an OO language, even though it has had some OO capability
added on to it. The Perl module Moose provides tools to help write code that is
far more OO like in appearance. Underneath it all though, an object in Perl is
just a "named" hash, with attributes as keys in the hash. Moose has been used
extensively in this demo exercise.

Due to the nature of Moose, there may be what appear to be inconsistencies in
some of the code, but are done that way for specific reasons (especially when it
comes to privacy) not elaborated here.



Installation

Perl should be installed by default on most Unix and Linux based Operating
Systems. CPAN is the main archival network for all Perl modules. Most of the
dependencies will be installed from there. If you have never used CPAN, type

> cpan

on the command line. It will run through a number of questions related to
configuring access to cpan. Majority of the time, you can just enter the
defaults, as long as you have root access to where you are installing it to.

If you don't have root access, you will need a local lib directory for cpan
modules. I have not gone into details here on how to do this. However, you
can look at http://www.cpan.org/modules/INSTALL.html, especially the
bootstrapping technique.

firstly, install Carton (a packaging tool for Perl):

> cpan -i Carton

Once that's done, you can then use carton to install the application's
dependencies into a local directory under the main project directory.

> carton install



Directory Structure

bin/ - Contains the main perl script.
lib/ - Contains all the modules for the application
cfg/ - Contains configuration files (one for Template and one for Log4perl)
log/ - Contains log files generated when running the script
t/ - Contains the main test harness for the unit tests.
t/lib - Contains all the unit test library classes
t/Data - Contains data files, and location of file generated by the unit tests.
         Generated files are cleaned up after each unit test.
resource/ - Contains resource files such as the html template and original XML
            files provided for this exercise. It also contains the static
            directory with the css file, which will need to be copied to the
            location, where the html pages will be generated.



Running the Application

Before running the application, ensure that the "static" folder containing the
"all.css" file is in the path where all the html files are to be generated.

To run the unit tests

> carton exec "prove -lv t/classTests.t"

To run the application

> carton exec bin/buildDestinations.pl -t <taxonomy xml> -d <destinations xml> -p <path>

BuildDestinations.pl will also print a help message:

> carton exec bin/buildDestinations.pl -h
